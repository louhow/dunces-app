service: the-app

frameworkVersion: ">=1.1.0 <=2.20.1"

provider:
  name: aws
  runtime: python3.8
  profile: dunce
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    SLACK_BOT_TOKEN: ${ssm:/Config/Test/Slack/BotToken~true}
    SPOTIFY_THREAD_PLAYLIST_ID: CHANGEME
    SPOTIFY_CLIENT_ID: ${ssm:/Config/Prod/SpotifyClientId~true}
    SPOTIFY_CLIENT_SECRET: ${ssm:/Config/Prod/SpotifyClientSecret~true}
    SPOTIFY_USER_NAME: ${ssm:/Config/Prod/SpotifyLouUsername~true}
    SPOTIFY_USER_REFRESH_TOKEN: ${ssm:/Config/Prod/SpotifyLouRefreshToken~true}
    STAGE: ${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  slack:
    handler: slack/event.handler
    events:
      - http:
          path: slack/handler
          method: post
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: PK
            AttributeType: S
          -
            AttributeName: SK
            AttributeType: S
        KeySchema:
          -
            AttributeName: PK
            KeyType: HASH
          -
            AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
