service: the-app

frameworkVersion: "3"

provider:
  name: aws
  #deploymentMethod: direct
  runtime: python3.8
  profile: dunce
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
    APP_KEY: ${ssm:/Config/Prod/Dunces/Key}
    APP_STATE: ${ssm:/Config/Prod/Dunces/AppState}
    SLACK_BOT_TOKEN: ${ssm:/Config/Prod/Slack/BotToken}
    SLACK_CLIENT_ID: ${ssm:/Config/Prod/Slack/ClientId}
    SLACK_CLIENT_SECRET: ${ssm:/Config/Prod/Slack/ClientSecret}
    SLACK_SIGNING_SECRET: ${ssm:/Config/Prod/Slack/SigningSecret}
    SPOTIFY_CLIENT_ID: ${ssm:/Config/Prod/SpotifyClientId}
    SPOTIFY_CLIENT_SECRET: ${ssm:/Config/Prod/SpotifyClientSecret}
    DEFAULT_SPOTIFY_USER_NAME_ENCRYPT: ${ssm:/Config/Prod/SpotifyDefaultUser}
    DEFAULT_SPOTIFY_USER_REFRESH_TOKEN_ENCRYPT: ${ssm:/Config/Prod/SpotifyDefaultRefreshToken}
    STAGE: ${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  slack_event:
    handler: dunces/handlers/slack_event.handler
    events:
      - http:
          path: slack/handler
          method: post
          cors: true
  slack_command_recommend:
    handler: dunces/handlers/slack_command_recommend.handler
    events:
      - http:
          path: slack/recommend_handler
          method: post
          cors: true
  slack_oauth_pre:
    handler: dunces/handlers/slack_oauth.pre_install
    events:
      - http:
          path: slack/begin_auth
          method: get
          cors: true
  slack_oauth_post:
    handler: dunces/handlers/slack_oauth.post_install
    events:
      - http:
          path: slack/end_auth
          method: get
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: PK
            AttributeType: S
          -
            AttributeName: SK
            AttributeType: S
        KeySchema:
          -
            AttributeName: PK
            KeyType: HASH
          -
            AttributeName: SK
            KeyType: RANGE
#        GlobalSecondaryIndexes:
#          - IndexName: GS1
#            KeySchema:
#              - AttributeName: GS1PK
#                KeyType: HASH
#              - AttributeName: GS1SK
#                KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

custom:
#  localstack:
#    stages:
#      - local
#    host: http://localhost  # optional - LocalStack host to connect to
#    edgePort: 4566  # optional - LocalStack edge port to connect to
#    autostart: true  # optional - Start LocalStack in Docker on Serverless deploy
#    lambda:
#      # Enable this flag to improve performance
#      mountCode: True
#    docker:
#      # Enable this flag to run "docker ..." commands as sudo
#      sudo: False
  pythonRequirements:
    dockerizePip: true

plugins:
  - serverless-python-requirements
